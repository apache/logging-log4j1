<project name="log4j" default="build" basedir="." >


  <!-- The build.properties file defines the parth to local jar files -->
  <property file="build.properties"/>

  <property name="version" value="1.3alpha-4"/>

  <!-- The base directory relative to which most targets are built -->
  <property name="base" value="."/>

  <!-- The directory where source files are stored. -->
  <property name="java.source.dir" value="src/java/"/>

  <!-- The directory where the package-list file is found, ./ or -->
  <!-- build/ -->
  <property name="packaging.dir" value="build"/>

  <!-- Deprecation warning? --> 
  <property name="deprecation" value="on"/>
	
  <!-- Destination for compiled files -->
  <property name="javac.dest" value="classes"/>

  <!-- Source directory for the examples/ -->
  <property name="examples.src" value="examples/src"/>

  <!-- Destination for compiled files for examples/ -->
  <property name="examples.javac.dest" value="examples/classes"/>

  <!-- Destination for generated jar files -->
  <property name="jar.dest" value="${basedir}"/>

  <!-- The jar file that the jar task will generate -->
  <property name="log4j.jar" value="log4j-${version}.jar"/>

  <!-- the jar file for Chainsaw that will be generated -->
  <property name="log4j-chainsaw.jar" value="log4j-chainsaw-${version}.jar"/>
  
  <!-- Destination for documentation files -->
  <property name="docs.dest" value="./docs"/>
  <!-- Source directory for xml docs -->
  <property name="xdocs.src" value="./src/xdocs"/>

  <!-- Javac with debug on/off. Log4j without debug on is hard to debug, so leave this settint on. -->
  <property name="debug" value="on"/>

  <!-- Destination for javadoc generated files -->
  <property name="javadoc.dest" value="docs/api"/>

  <!-- Icons source directory. -->
  <property name="icons.source" value="icons"/>

  <!-- The stem where most log4j source code is located. -->
  <property name="stem" value="org/apache/log4j"/>

  <!-- Some targets needs a more precise stem. -->
  <property name="BSTEM" value="${java.source.dir}/${stem}"/>

  <!-- Original manifest.mf file before filtering. -->
  <property name="manifest.src" value="build/manifest.mf"/>

  <!-- Directory where release images go. -->
  <property name="dist.images"  value="dist/images"/>

  <!-- Directory for temporary files. -->
  <property name="dist.tmp" value="dist/tmp"/>

  <!-- Note that this property is duplicated in ugli.xml -->
  <property name="path2ugli.properties" value="./classes/ugli.properties"/>

  <!-- Construct compile classpath -->
  <path id="compile.classpath">
    <pathelement location="${javac.dest}"/>
    <pathelement location="${javamail.jar}"/>
    <pathelement location="${activation.jar}"/>
    <pathelement location="${jaxp.jaxp.jar}"/>
    <pathelement location="${jaxp.parser.jar}"/>
    <pathelement location="${jms.jar}"/>
    <pathelement location="${jmx.jar}"/>
    <pathelement location="${jmx-extra.jar}"/>
    <pathelement location="${servlet-api.jar}"/>
    <pathelement location="${jdbc-stdext.jar}"/>
    <pathelement location="${jndi.jar}"/>
    <pathelement location="${regexp.oro.jar}"/>
  </path>

  <!-- Construct classpath for building the html pages-->
  <path id="site.classpath">
    <fileset dir="${logging-site}/lib">
      <include name="*.jar"/>
    </fileset>
  </path>


  <!-- ================================================================= -->
  <!-- Default target                                                    -->
  <!-- ================================================================= -->

  <target name="usage">
    <echo>

    These are the targets supported by this ANT build scpript:

    build   - compile all project files, if a certain library is missing,
              then the compilation of its dependents are skipped.

    javadoc - build project javadoc files

    jar     - build log4j-core and log4j jar files

    dist    - will create a complete distribution in dist/
    </echo>
  </target>

  <target name="jaxpCheck">
    <available classname="javax.xml.parsers.DocumentBuilderFactory"
                          property="jaxp-present"/>
  </target>

  <target name="jaxp" depends="jaxpCheck" if="jaxp-present">
    <echo message="JAXP present."/>
  </target>
	
  <target name="jndiCheck">
    <available classname="javax.naming.Context" property="jndi-present">
      <classpath refid="compile.classpath"/>
    </available>
    <fail unless="jndi-present">

      The JNDI API is required to build ContextJNDISelector, which has
      become a core log4j class. The JNDI API ships with JDK 1.3 and
      later. For JDK 1.2, you can get the JNDI API from

        http://java.sun.com/products/jndi/downloads/index.html

    </fail>
  </target>
  <target name="jndi" depends="jndiCheck" if="jndi-present">
    <echo message="JNDI is present."/>
  </target>

  <target name="oroCheck" >
    <available classname="org.apache.oro.text.perl.Perl5Util" property="oro-present">
      <classpath refid="compile.classpath"/>
    </available>
  </target>

  <target name="oro" depends="oroCheck" if="oro-present">
    <echo message="ORO is present."/>
  </target>
	  	
  <target name="jmsCheck" depends="jndiCheck" if="jndi-present">
    <available classname="javax.jms.Message" property="jms-present">
     <classpath refid="compile.classpath"/>
    </available>
  </target>
  	
  <target name="jms" depends="jmsCheck" if="jms-present">
    <echo message="JMS is present."/>
  </target>

  <target name="javamailCheck">
    <available classname="javax.mail.Message" property="javamail-present">
      <classpath refid="compile.classpath"/>
    </available>
  </target>
  <target name="javamail" depends="javamailCheck" if="javamail-present">
    <echo message="JAVAMAIL is present."/>
  </target>

  <target name="servletAPICheck">
    <available classname="javax.servlet.ServletContext" property="servletAPI-present">
     <classpath refid="compile.classpath"/>
    </available>
  </target>
  <target name="servletAPI" depends="servletAPICheck" if="servletAPI-present">
    <echo message="Servlet API is present."/>
  </target>

  <target name="jdbcExtensionCheck">
    <available classname="javax.sql.DataSource" property="jdbcExtension-present">
     <classpath refid="compile.classpath"/>
    </available>
  </target>
  <target name="jdbcExtension" depends="jdbcExtensionCheck" if="jdbcExtension-present">
    <echo message="JDBC Standard Extension is present."/>
  </target>

  <target name="init">
    <tstamp />
  </target>

  <target name="build.log4j" description="Compile log4j, but not chainsaw or examples."
	      depends="init, build.core,  
	               build.xml, build.javamail, build.jms,
	               build.servletAPI, build.db, build.oro"/>


  <target name="build" description="Compile all log4j components."
	      depends="build.log4j, build.examples, build.chainsaw"/>

  <target name="requiredepsCheck" 
  	depends="jndiCheck,jmsCheck,oroCheck,javamailCheck,servletAPICheck,jdbcExtensionCheck,jaxpCheck"
  	description="Compile all log4j components - fail if dependencies do not exist"
  	>
    <condition property="alldeps.exist">
      <and>
        <isset property="jndi-present"/>
        <isset property="oro-present"/>
        <isset property="jms-present"/>
        <isset property="javamail-present"/>
        <isset property="servletAPI-present"/>         	
        <isset property="jdbcExtension-present"/>       	
        <isset property="jaxp-present"/>         	
      </and>
    </condition>
    <fail unless="alldeps.exist">
      Some jar files required to perform a full compile of log4j are not 
       available on the classpath.  Update build.properties as needed.
    </fail>	
  </target>

  <target name="build.core" depends="init, jndiCheck" if="jndi-present" >
    <mkdir dir="${javac.dest}" />
    <javac srcdir="${java.source.dir}"
     destdir="${javac.dest}"
     deprecation="on"
     includes="org/apache/ugli/**/*.java,
    	       ${stem}/**/*.java, 
    	       org/apache/joran/**/*.java, 
    	       ${stem}/xml/XMLLayout.java,"
     excludes="org/apache/ugli/impl/JDK14*.java,
    	            **/UnitTest*.java,
                    **/StressCategory.java,
                    **/doc-files/*,
                    ${stem}/chainsaw/**,
                    ${stem}/db/**,
                    ${stem}/xml/**,
                    ${stem}/test/serialization/**,
                    ${stem}/net/SMTPAppender.java,
                    ${stem}/net/JMS*.java,
    	            ${stem}/varia/LogFilePatternReceiver*.java,
    	            ${stem}/rule/LikeRule.java,
                    ${stem}/jmx/*.java,
                    ${stem}/or/jms/*.java,
                    ${stem}/selector/servlet/*.java"
      debug="${debug}">
      <classpath refid="compile.classpath"/>
    </javac>
  </target>


  <target name="build.chainsaw" depends="build.core">
    <ant antfile="build-chainsaw.xml" target="build.chainsaw"/> 
  </target>	
  
  <target name="chainsaw.jar" depends="build.core">
    <ant antfile="build-chainsaw.xml" target="chainsaw.jar"/> 
  </target>	  

  <target name="chainsaw" depends="log4j.jar" description="Builds and runs Chainsaw v2" >
    <ant antfile="build-chainsaw.xml" target="chainsaw"/>
  </target>	
	
  <target name="webstart" depends="build">
	<ant antfile="build-chainsaw.xml" target="webstart"/>
  </target>


 <!-- ================================================= -->
 <!--                Compile examples                   -->
 <!-- ================================================= -->
 
  <target name="build.examples" depends="build.core">
    <mkdir dir="${examples.javac.dest}" />
    <javac srcdir="${examples.src}"
     destdir="${examples.javac.dest}"
     includes="**/*.java"
     excludes="**/jmx/*.java"
     deprecation="${deprecation}"
     debug="${debug}"
     >
      <classpath refid="compile.classpath"/>
    </javac>

    <rmic base="${examples.javac.dest}" classname="factor.NumberCruncherServer" />
  </target>

 <target name="build.xml" depends="init, jaxp" if="jaxp-present">
    <javac srcdir="${java.source.dir}"
     destdir="${javac.dest}"
     includes="${stem}/xml/**/*.java"
           excludes="${stem}/xml/examples/doc-files/**.java,
               ${stem}/xml/Transform.java"
     deprecation="${deprecation}">
      <classpath refid="compile.classpath"/>
    </javac>
    <copy file="${BSTEM}/xml/log4j.dtd"
    tofile="${javac.dest}/${stem}/xml/log4j.dtd" />
    <copy file="${BSTEM}/xml/logger.dtd"
    tofile="${javac.dest}/${stem}/xml/logger.dtd" />
  </target>

  <target name="build.javamail" depends="init, javamail"
          if="javamail-present">
    <javac srcdir="${java.source.dir}"
           destdir="${javac.dest}"
           deprecation="${deprecation}"
           includes="${stem}/net/SMTPAppender.java">
      <classpath refid="compile.classpath"/>
    </javac>
  </target>
  
  <target name="build.oro" depends="init, oro" if="oro-present">
    <javac srcdir="${java.source.dir}"
           destdir="${javac.dest}"
           deprecation="${deprecation}"
           includes="${stem}/varia/LogFilePatternReceiver*.java,
           ${stem}/rule/LikeRule.java">
      <classpath refid="compile.classpath"/>
    </javac>
  </target>
  
  <target name="build.jms" depends="init, jms, jndi" if="jms-present">
    <javac deprecation="${deprecation}"
           srcdir="${java.source.dir}"
           debug="${debug}"
           destdir="${javac.dest}"
           includes="${stem}/net/JMS*.java">
      <classpath refid="compile.classpath"/>
    </javac>
  </target>

  <target name="build.servletAPI" depends="init, servletAPI"
          if="servletAPI-present">
    <javac srcdir="${java.source.dir}"
           destdir="${javac.dest}"
           debug="${debug}"
           deprecation="${deprecation}"
           includes="${stem}/selector/servlet/*.java">
      <classpath refid="compile.classpath"/>
    </javac>
  </target>

  <target name="build.db" depends="init, jdbcExtension"
          if="jdbcExtension-present">
    <javac srcdir="${java.source.dir}"
           destdir="${javac.dest}"
           deprecation="${deprecation}"
           debug="${debug}"
           includes="${stem}/db/**.java">
      <classpath refid="compile.classpath"/>
    </javac>
  </target>
  
  <!-- ================================================================= -->
  <!-- Remove all generated (compiled) class files.                      -->
  <!-- ================================================================= -->
  <target name="clean" depends="init" description="Delete all compiled files.">
    <delete dir="${javac.dest}/" />
    <delete dir="${examples.javac.dest}/" />
  </target>

  <!-- ================================================================= -->
  <!-- Actual work is done in the dependencies.                         -->
  <!-- ================================================================= -->
  <target name="jar" depends="log4j.jar, chainsaw.jar">
  </target>

  <!-- ================================================================= -->
  <!-- Create log4j.jar, excluding tests and other odds and ends.        -->
  <!-- ================================================================= -->
  <target name="log4j.jar" depends="build.log4j">
    
    <delete file="${log4j.jar}" verbose="true"/>
    <delete file="${path2ugli.properties}"/>

    <!-- Much depends on setting up ugli.properties file correctly -->
    <propertyfile file="${path2ugli.properties}" comment="log4j implementation">
      <entry key="ugli.factoryAdapterClass" value="org.apache.ugli.impl.Log4jLoggerFA"/>
    </propertyfile>

    <jar jarfile="${jar.dest}/${log4j.jar}" basedir="${javac.dest}"
         includes="ugli.properties,
                org/apache/ugli/**/*.class
                ${stem}/*.class, 
    	        ${stem}/xml/log4j.dtd, 
    	        ${stem}/xml/logger.dtd,
                org/apache/joran/**/*.class,
                ${stem}/joran/**/*.class,
                ${stem}/config/*.class,
                ${stem}/helpers/*.class,
                ${stem}/spi/**/*.class,
                ${stem}/net/*.class,
                ${stem}/db/**/*.class,
                ${stem}/html/**/*.class,
                ${stem}/varia/*.class,
                ${stem}/filter/*.class,    	
                ${stem}/rule/*.class,    	    	
                ${stem}/nt/*.class,
                ${stem}/rolling/**/*.class,
                ${stem}/xml/*.class,
    	        ${stem}/scheduler/*.class,        
    	        ${stem}/selector/*.class,
                ${stem}/selector/servlet/*.class,
                ${stem}/pattern/*.class,
                ${stem}/or/*.class,
                ${stem}/or/sax/*.class,
                ${stem}/or/jms/*.class,
                ${stem}/plugins/*.class,
                ${stem}/config/*.class"
      excludes="org/apache/ugli/**/JDK14*.class,
    	         **/UnitTest**, 
    	        ${stem}/**/*BeanInfo.class,"
    	>
      <manifest>
        <attribute name="Manifest-version" value="1.0"/>
        <section name="org/apache/log4j/">
          <attribute name="Implementation-Title" value="log4j"/>
          <attribute name="Implementation-Version" value="${version}"/>
          <attribute name="Implementation-Vendor" value="Apache Software Foundation"/>
        </section>
      </manifest>
    </jar>

    <!-- remove ugli.properties when done -->
    <delete file="${path2ugli.properties}"/>

  </target>
  
  
  <!-- ================================================================= -->
  <!-- This target builds the javadoc files.                             -->
  <!-- ================================================================= -->
  <target name="javadoc" depends="init">
    
    <mkdir dir="${javadoc.dest}" />
    
    <javadoc sourcepath="${java.source.dir}"
             destdir="${javadoc.dest}"
             packagenames="org.apache.log4j,
                 org.apache.log4j.db,
                 org.apache.log4j.db.dialect,
                 org.apache.log4j.plugins,
                 org.apache.log4j.config,
                 org.apache.log4j.helpers,
                 org.apache.log4j.net,
                 org.apache.log4j.nt,
                 org.apache.log4j.or,
                 org.apache.log4j.or.sax,
                 org.apache.log4j.or.jms,
                 org.apache.log4j.pattern,
                 org.apache.log4j.rolling,
                 org.apache.log4j.rolling.helper,
                 org.apache.log4j.selector,
                 org.apache.log4j.spi,
                 org.apache.log4j.filters,
                 org.apache.log4j.varia,
                 org.apache.log4j.rule,
                 org.apache.log4j.xml,
                 org.apache.log4j.xml.examples,
                 org.apache.joran,
                 org.apache.joran.action,
                 org.apache.log4j.joran,
                 org.apache.log4j.joran.action,
                 org.apache.ugli,
                 org.apache.ugli.impl"
             additionalparam="-breakiterator"
             version="true"
             protected="true"
             author="true"
             use="true"
             overview="${docs.dest}/overview.html"
             doctitle="log4j version ${version}&lt;br&gt;API Specification"
             windowtitle="Log4j Version ${version}"
             header="&lt;b&gt;Log4j ${version}&lt;/b&gt;"
             bottom="Copyright 2000-2005 Apache Software Foundation.">
      
      <link href="http://java.sun.com/products/j2se/1.3/docs/api/"/>
      <link href="http://java.sun.com/j2ee/sdk_1.3/techdocs/api/"/>
      <classpath refid="compile.classpath"/>
      <classpath path="${regexp.oro.jar}"/>
    </javadoc>
  </target>

  <!-- ============================================== -->
  <!-- Build the site files using Anakia              -->
  <!-- ============================================== -->
  <target name="prepareSite">
    <available classname="org.apache.velocity.anakia.AnakiaTask"
               property="AnakiaTask.present">
      <classpath refid="site.classpath"/>
    </available>
  </target>
  
  <target name="checkSite" depends="prepareSite" unless="AnakiaTask.present">
    <echo>
      AnakiaTask is not present! Please check to make sure that
      velocity.jar is in your classpath.
    </echo>
  </target>

  <target name="site" depends="checkSite" if="AnakiaTask.present">
    <taskdef name="anakia" classname="org.apache.velocity.anakia.AnakiaTask">
      <classpath refid="site.classpath"/>
    </taskdef>
    
    <mkdir dir="${docs.dest}/css"/>  
    <copy file="${logging-site}/docs/css/site.css" tofile="${docs.dest}/css/site.css"/>
    
    <anakia basedir="${xdocs.src}" destdir="${docs.dest}/"
            extension=".html"
            style="site.vsl"
            projectFile="stylesheets/project.xml"
            excludes="**/stylesheets/**, empty.xml"
            includes="**/*.xml"
            lastModifiedCheck="true"
            templatePath="${logging-site}/src/xdocs/stylesheets">
    </anakia>
    
  </target>
  

 <!-- ================================================================= -->
 <!-- Build a complete distribution. Results go to ${dist.images}       -->
 <!-- ================================================================= -->
  <target name="dist" depends="init, clean, requiredepsCheck, javadoc, jar, site">

    <delete verbose="true">
      <fileset dir=".">
        <patternset>
          <include name="**/*.bak"/>
          <include name="dist/velocity.log"/>
          <include name="${BSTEM}/**/temp*"/>
          <include name="${BSTEM}/performance/test"/>
          <include name="${BSTEM}/test/current.*"/>
          <include name="${BSTEM}/test/current.*"/>
          <include name="${BSTEM}/examples/test"/>
          <include name="${BSTEM}/test/logging.*"/>
          <include name="${BSTEM}/test/log4j.properties"/>
          <include name="{$BSTEM}/test/socket.lcf"/>
          <include name="${BSTEM}/test/file"/>
          <include name="${BSTEM}/test/output.*"/>
          <include name="${BSTEM}/nt/EventLogCategories.dbg"/>
          <include name="${BSTEM}/nt/*.h"/>
          <include name="${BSTEM}/nt/*.obj"/>
          <include name="${BSTEM}/nt/*.idb"/>
          <include name="${BSTEM}/nt/EventLogCategories.rc"/>
          <include name="${BSTEM}/nt/EventLogCategories.RES"/>
          <include name="${BSTEM}/nt/EventLogCategories.res"/>
          <include name="${BSTEM}/nt/MSG00001.bin"/>
          <include name="${BSTEM}/nt/NTEventLogAppender.lib"/>
          <include name="${BSTEM}/nt/NTEventLogAppender.exp"/>
          <include name="${BSTEM}/nt/vc50.idb"/>
          <include name="${BSTEM}/net/test/loop.log"/>
          <include name="${BSTEM}/net/test/loop.log.1"/>
          <include name="${jar.dest}/manifest.mf"/>
          <include name="${javac.dest}/*.class"/>
        </patternset>
      </fileset>
    </delete>
    
    <mkdir  dir="${dist.images}" />
    
    <mkdir  dir="${dist.tmp}/logging-log4j-${version}" />
    
    <copy todir="${dist.tmp}/logging-log4j-${version}">
      <fileset dir="${base}"
               includes="src/java/**,
               docs/**,
               examples/**,
               build/*,
               build.xml,
               build.properties.sample,
               INSTALL,
               LICENSE.txt,
               ${log4j.jar}"
               excludes="**/*.bak, 
               **/goEnv.bat,
               docs/pub-support/*,
               src/java/org/apache/log4j/test/**/*,
               **/.#*"
               />
    </copy>
    

    <fixcrlf srcdir="${dist.tmp}/logging-log4j-${version}"
             includes="build.sh" cr="remove"/>
    <fixcrlf srcdir="${dist.tmp}/logging-log4j-${version}"
             includes="build.bat" cr="add"/>
    <chmod   dir="${dist.tmp}/logging-log4j-${version}"
             includes="build.sh" perm="+x"/>
    
    <tar tarfile="${dist.images}/logging-log4j-${version}.tar"
         basedir="${dist.tmp}"
         includes="logging-log4j-${version}/**" />
    
    <gzip src="${dist.images}/logging-log4j-${version}.tar"
          zipfile="${dist.images}/logging-log4j-${version}.tar.gz" />
    
    <zip zipfile="${dist.images}/logging-log4j-${version}.zip"
         basedir="${dist.tmp}"
         includes="logging-log4j-${version}/**" />


    <delete dir="${dist.tmp}" />
  </target>

</project>

