===========
Using log4j
===========

1) First untar or unzip the distribution file.

2) Assuming you chose to extract the distribution in to the
   PATH_OF_YOUR_CHOICE, untarring the distribution file should create
   a logging-log4j-VERSION directory, where VERSION is the log4j
   version number, under PATH_OF_YOUR_CHOICE. We will refer to the
   directory PATH_OF_YOUR_CHOICE/apache-log4j-VERSION/ as $LOG4J_HOME/.

3) Add $LOG4J_HOME/log4j-VERSION.jar to your CLASSPATH,

4) You can now test your installation by first compiling the following
   simple program.

    import org.apache.log4j.Logger;
    import org.apache.log4j.BasicConfigurator;

    public class Hello {

      private static final Logger logger = Logger.getLogger(Hello.class);

      public
      static
      void main(String argv[]) {
    	BasicConfigurator.configure();
    	logger.debug("Hello world.");
    	logger.info("What a beatiful day.");
      }
    }


   After compilation, try it out by issuing the command

      java Hello

   You should see log statements appearing on the console.

5) Refer to the javadoc documentation and the user manual on how to
   include log statements in your own code.

=========
JAR files
=========

The log4j distribution comes with one jar file: log4j-VERSION.jar
under the LOG4J_HOME directory.

This jar file contains all the class files of the log4j project,
except test cases and classes from the "examples" and
"org.apache.log4j.performance" packages.


==============
Building log4j
==============

log4j (as of 1.2.18) is built with Maven 3 and JDK 8 or higher.

The project compiles to Java 1.4 bytecode, so you need to have Java 8 for that.
If you run Maven with newer Java version, you need to configure
the location of Java 1.8 via ~/.m2/toolchains.xml.

      <?xml version="1.0" encoding="UTF-8"?>
      <toolchains>
         <toolchain>
            <type>jdk</type>
            <provides>
               <version>1.8</version>
            </provides>
            <configuration>
               <jdkHome>/path/to/java-1.8.0_222</jdkHome>
               <!-- <jdkHome>C:\Program Files\Java\jdk1.8.0_222</jdkHome> -->
            </configuration>
         </toolchain>
      </toolchains>

See https://maven.apache.org/guides/mini/guide-using-toolchains.html
for more information about maven toolchains.

After setting up a toolchain you can then build using the following command:

  mvn verify

Build results can be found in the target/ subdirectory.

==================
NTEventLogAppender
==================

The maven build uses prebuilt NTEventLogAppender.dll and
NTEventLogAppender.amd64.dll binaries. To rebuild these, see

  src/ntdll

for more information.
