<?xml version="1.0"?>
<document>

  <properties>
    <author>Ceki Gulcu</author>
    <title>Universal and Generic Logging Interface (UGLI) </title>
  </properties>

  <body>

    <h1>Universal and Generic Logging Interface (UGLI)</h1>

      <p>The Universal and Generic Logging Interface or UGLI is
      intended to serve as a simple abstraction of various logging
      APIs allowing to plug in the desired implementation at
      deployment time. Note that log4j version 1.3 and later support
      UGLI directly as log4j itself is implemented in terms of the
      UGLI interface.
      </p>

      <h2>Typical usage pattern</h2>

      <pre class="source">

<b>import org.apache.ugli.ULogger;</b>
<b>import org.apache.ugli.LoggerFactory;</b>

public class Wombat {
  
  <b>final ULogger logger = LoggerFactory.getLogger(Wombat.class);</b>
  
  Integer t;
  Integer oldT;

  public void setTemperature(Integer temparature) {
    
    oldT = t;        
    t = temperature;

    <b>logger.debug("Temperature set to {}. Old temperature was {}.", t, oldT);</b>

    if(temperature.intValue() > 50) {
      <b>logger.info("Temperature has risen above 50 degrees".);</b>
    }
  }

}
      </pre>
      
      <h2>Swapping implementations at runtime</h2>

        <p>UGLI currently supports four implementations, namely, NOP,
        Simple, JDK 1.4 logging and log4j. Log4j 1.3 ships with four
        jar files <em>ugli-nop.jar</em>, <em>ugli-simple.jar</em>,
        <em>ugli-jdk14.jar</em> and <em>log4j.jar</em>. Each of these
        jar files are hardwired to use just one implementation, that
        is NOP, Simple, JDK 1.4 logging and log4j, respectively.
        </p>

        <p>Authors of widely-distributed components and librarires may
        code against the UGLI interface in order to avoid imposing an
        logging API implementation on the end-user.  At deployment
        time, the end-user may choose the desired logging API
        implementation by inserting the corresponding jar file in her
        classpath. This stupid, simple and relatively robust approach
        avoids many of the painful bugs associated with dynamic
        discovery processes based on fragile classloader hacks.
        </p>
     
        <p>Small applications where configuing log4j can be somewhat
        of an overkill can drop in <em>ugli-simple.jar</em> in place
        of <em>log4j.jar</em>. 
        </p>


        <h2>Summary</h2>

        <table class="ls" cellspacing="4" cellpadding="4">
          <tr>
            <th align="left">Advantage</th>
            <th align="left">Description</th>
          </tr>

          <tr>
            <td>Swappable logging API implementations</td>
            <td>The desired logging API can be plugged in at
            deployment time by insterting the appropriate jar file on
            the classpath.
            </td>
          </tr>

          <tr>
            <td>Adapter implementations for the most popular APIs
            </td>

            <td>UGLI already supports the most popular logging APIs,
            namely log4j, JDK 1.4 logging, Simple logging and NOP.
            </td>
          </tr>

          <tr>
            <td>Built-in support</td>

            <td>Log4j has built-in support for UGLI. 

            </td>
          </tr>

          <tr>
            <td>Simplicity</td>
            <td>
              <p>The UGLI interfaces and their various
              implemenatations are extremely imple. Most developers
              familiar with the Java language should be able to read
              and fully understand the code in less than one hour.
              </p>              
            </td>

            <tr>
              <td>Ease of implemenation</td>

              <td>The simplicity of the UGLI interfaces and the
              deployment model make it easy for developers of other
              logging APIs to easily conform to the UGLI model.
              </td>
            </tr>
          </tr>

        </table>
        
  </body>  

</document>
