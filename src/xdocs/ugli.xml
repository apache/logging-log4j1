<?xml version="1.0"?>
<document>

  <properties>
    <author>Ceki Gulcu</author>
    <title>Universal and Generic Logging Interface (UGLI) </title>
  </properties>

  <body>

    <h1>Universal and Generic Logging Interface (UGLI)</h1>

      <p>The Universal and Generic Logging Interface or UGLI is
      intended to serve as a simple abstraction of various logging
      APIs allowing to plug in the desired implementation at
      deployment time. Note that log4j version 1.3 and later support
      UGLI directly as log4j itself is implemented in terms of the
      UGLI interface.
      </p>

      <h2>Typical usage pattern</h2>

      <pre class="source">
 1: <b>import org.apache.ugli.ULogger;</b>
 2: <b>import org.apache.ugli.LoggerFactory;</b>
 3: 
 4: public class Wombat {
 5:  
 6:   <b>final ULogger logger = LoggerFactory.getLogger(Wombat.class);</b>
 7:   Integer t;
 8:   Integer oldT;
 9:
10:   public void setTemperature(Integer temparature) {
11:    
12:     oldT = t;        
13:     t = temperature;
14:
15:     <b>logger.debug("Temperature set to {}. Old temperature was {}.", t, oldT);</b>
16:
17:     if(temperature.intValue() > 50) {
18:       <b>logger.info("Temperature has risen above 50 degrees".);</b>
19:     }
20:   }
21: }
      </pre>
      
      <p>The example above illustrates the typical usage pattern for
      UGLI. Note the use of parametized log messages on line 15. See
      the question <a
      href="http://logging.apache.org/log4j/docs/faq.html#2.3">
      "What is the fastest way of (not) logging?"</a> in the log4j
      FAQ for more details.
      </p>

      <h2>Swapping implementations at runtime</h2>

        <p>UGLI currently supports four implementations, namely, NOP,
        Simple, JDK 1.4 logging and log4j. Log4j 1.3 ships with four
        jar files <em>ugli-nop.jar</em>, <em>ugli-simple.jar</em>,
        <em>ugli-jdk14.jar</em> and <em>log4j.jar</em>. Each of these
        jar files are hardwired to use just one implementation, that
        is NOP, Simple, JDK 1.4 logging and log4j, respectively.
        </p>

        <p>Authors of widely-distributed components and librarires may
        code against the UGLI interface in order to avoid imposing an
        logging API implementation on the end-user.  At deployment
        time, the end-user may choose the desired logging API
        implementation by inserting the corresponding jar file in her
        classpath. This stupid, simple and relatively robust approach
        avoids many of the painful bugs associated with dynamic
        discovery processes based on fragile classloader hacks.
        </p>
     
        <p>Small applications where configuing log4j can be somewhat
        of an overkill can drop in <em>ugli-simple.jar</em> in place
        of <em>log4j.jar</em>. 
        </p>


        <h2>Summary</h2>

        <table class="ls" cellspacing="4" cellpadding="4">
          <tr>
            <th align="left">Advantage</th>
            <th align="left">Description</th>
          </tr>

          <tr>
            <td>Swappable logging API implementations</td>
            <td>The desired logging API can be plugged in at
            deployment time by insterting the appropriate jar file on
            the classpath.
            </td>
          </tr>

          <tr>
            <td>Adapter implementations for the most popular APIs
            </td>

            <td>UGLI already supports the most popular logging APIs,
            namely log4j, JDK 1.4 logging, Simple logging and NOP.
            </td>
          </tr>

          <tr>
            <td>Support for parameterized log messages</td>

            <td>UGLI adapters, for all APIs and not just log4j,
            support parametrized log messages.
            </td>
          </tr>


          <tr>
            <td>Built-in support</td>

            <td>Log4j has built-in support for UGLI. 

            </td>
          </tr>

          <tr>
            <td>Simplicity</td>
            <td>
              <p>The UGLI interfaces and their various adapters are
              extremely simple. Most developers familiar with the Java
              language should be able to read and fully understand the
              code in less than one hour.
              </p>           

              <p>Just as importantly, UGLI does not rely on any
              classloader tricks. Every variant of
              <em>ugli-&lt;impl&gt;.jar</em> is hardwired to use one
              specific implementation.</p>
            </td>

            <tr>
              <td>Ease of implemenation</td>

              <td>The simplicity of the UGLI interfaces and the
              deployment model make it easy for developers of other
              logging APIs to easily conform to the UGLI model.
              </td>
            </tr>
          </tr>

          <tr>
            <td>No dynamic discovery</td>
            
            <td>Life is too short to deal with classloader
            hacks.</td>
          </tr>

        </table>
        
  </body>  

</document>
